# Task ID: 3
# Title: 共享Layout组件实现
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: 实现共享的页面布局组件，包括页眉、页脚和主题切换功能。
# Details:
#   1. 创建主题切换功能：
#      - 在src/context目录下创建ThemeProvider.tsx：
#        - 使用React Context实现主题状态管理
#        - 创建useTheme hook以便在组件中访问和切换主题
#        - 实现主题持久化（localStorage）
#        - 支持跟随系统主题的默认行为
#   
#   2. 创建Layout组件：
#      - 在src/components目录下创建Layout.tsx：
#        - 使用React children props包裹页面内容
#        - 实现固定的页眉(Header)组件，包含：
#          - 网站Logo/名称
#          - 主导航链接
#          - 主题切换按钮（调用useTheme hook）
#        - 实现通用页脚(Footer)组件，包含：
#          - 版权信息
#          - 社交链接
#          - 其他必要信息
#   
#   3. 创建通用UI组件：
#      - 使用shadcn/ui组件库安装必要的UI组件：
#        - 导航菜单组件：Navigation Menu
#        - 主题切换开关：Switch/Toggle
#        - 下拉菜单（可选）：Dropdown Menu
#        - 其他需要的通用组件
#   
#   4. 实现响应式设计：
#      - 确保布局在移动设备上正确显示
#      - 为小屏幕实现折叠菜单
#      - 使用Tailwind的响应式类处理不同屏幕尺寸
#   
#   5. 集成到应用中：
#      - 在App.tsx中引入并使用Layout组件
#      - 使用ThemeProvider包裹应用
#      - 确保主题样式正确应用到整个应用
#
# Test Strategy:
#   1. 单元测试：
#      - 测试ThemeProvider的状态管理逻辑
#      - 测试useTheme hook的功能
#      - 测试Layout组件的渲染逻辑
#   
#   2. 交互测试：
#      - 验证主题切换功能在各种场景下正常工作：
#        - 手动切换
#        - 跟随系统设置
#        - 页面刷新后保持选择
#      - 测试导航链接和交互元素功能正常
#   
#   3. 响应式测试：
#      - 在不同设备尺寸下测试布局
#      - 验证移动端菜单正常工作
#      - 检查内容在各种屏幕尺寸下的可读性 