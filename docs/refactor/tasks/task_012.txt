# Task ID: 12
# Title: 样式迁移与主题支持
# Status: pending
# Dependencies: 3, 5, 7
# Priority: medium
# Description: 迁移现有CSS样式到Tailwind配置，确保主题切换功能在所有页面正常工作。
# Details:
#   1. 分析现有样式：
#      - 检查原始`index.html`和`pages/**/*.html`中的内联样式、`<style>`标签以及可能存在的外部CSS文件。
#      - 识别关键的颜色变量、字体设置、布局模式和自定义样式规则。
#   
#   2. 迁移到Tailwind配置：
#      - 将识别出的颜色变量添加到`tailwind.config.js`的`theme.extend.colors`中。
#      - 配置字体：在`tailwind.config.js`中设置`theme.fontFamily`，并确保字体文件被正确加载（例如通过`index.css`或HTML `<link>`)。
#      - 对于常见的自定义样式，尝试用Tailwind的工具类或`@apply`指令在全局CSS (`index.css`)中实现。
#      - 对于无法用Tailwind轻松实现的复杂或独特的样式，保留为组件级样式或CSS Modules。
#   
#   3. 确保主题切换一致性：
#      - 检查ThemeProvider和useTheme Hook是否正确应用`dark`类到`<html>`标签。
#      - 验证所有组件（包括共享组件、页面组件、MDX内容）都能正确响应主题切换。
#      - 使用Tailwind的`dark:`变体来定义深色模式下的样式。
#      - 特别注意图表、代码块等嵌入内容的深色模式适配。
#   
#   4. 优化全局样式和MDX排版：
#      - 微调全局CSS (`index.css`)，设置基础样式和重置。
#      - 优化`@tailwindcss/typography` (prose) 插件的配置，使其更好地适应项目风格和深色模式。
#      - 确保证代码块（使用`pre`和`code`标签）在两种主题下都有良好的可读性。
#   
#   5. 响应式设计检查：
#      - 全面检查所有页面和组件在不同屏幕尺寸下的表现。
#      - 使用Tailwind的响应式断点 (`sm:`, `md:`, `lg:`等) 优化布局。
#
# Test Strategy:
#   1. 主题切换测试：
#      - 在所有主要页面和组件类型中反复切换浅色/深色主题。
#      - 检查所有元素（文本、背景、边框、图标、图表等）的颜色是否正确切换。
#      - 确保没有颜色对比度不足或样式错乱的问题。
#   
#   2. 样式一致性测试：
#      - 检查不同页面和组件的视觉风格是否统一（字体、间距、圆角等）。
#      - 验证Tailwind配置（颜色、字体）是否在整个应用中生效。
#   
#   3. MDX排版测试：
#      - 检查MDX渲染内容的排版在两种主题下是否美观、可读。
#      - 验证标题、列表、引用、代码块等元素的样式。
#   
#   4. 响应式布局测试：
#      - 使用浏览器开发者工具模拟不同设备尺寸。
#      - 检查布局是否正常，无内容溢出或元素重叠。
#      - 验证移动端导航、字体大小等是否适配。 