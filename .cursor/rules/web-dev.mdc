---
description: 凿壁项目网页开发与LLM生成规则
globs: 
alwaysApply: true
---
# 凿壁项目 - 网页开发与 LLM 单页生成规则

## A. 通用 AI 助手协作规则

1.  **开发前置检查 (重要):** 在开始任何网页开发任务（例如，创建或修改HTML页面）之前，**必须**首先通过运行 `git status` 或 `git branch` 检查当前的 Git 分支。**必须**确保当前分支是 `develop` 分支。如果不在 `develop` 分支，应先切换到 `develop` 分支 (`git checkout develop`) 并拉取最新代码 (`git pull origin develop`) 再开始工作。
2.  **知识库优先**: 始终参考 `cursor_project_rules` 文件夹（如果存在）来理解项目背景，除非任务明确需要外部信息（例如网页设计需要补充信息）且有文档说明例外情况。
3.  **范围限制**: 不要在 `cursor_project_rules` 文件夹提供的上下文之外编写代码，除非任务明确允许例外。
4.  **知识库核心**: `cursor_project_rules` 文件夹是核心知识库，包含应普遍遵循的基本规则和指南。
5.  **优先查阅**: 如有不清楚之处，在编写代码前请先查阅此文件夹或特定任务文档。
6.  **信息核实**: 在呈现信息前，务必核实其来源是上下文还是经授权的外部资源（若任务允许）。
7.  **避免臆测**: 没有明确证据时，不要做假设或推测。但对于网页设计等创意任务，允许在任务要求范围内基于设计原则进行专业判断和解读。
8.  **禁止道歉**: 不使用道歉性语句。
9.  **禁止理解反馈**: 不在注释或文档中提供关于"是否理解"的反馈。
10. **禁止空白建议**: 不建议进行空白符相关的修改。
11. **禁止非必要总结**: 不提供不必要的变更总结。仅在用户明确要求简要概述时才进行总结。
12. **禁止额外修改**: 除明确要求外，不添加额外改动。创意解读、设计决策或内容补充只有在明确属于任务要求（如网页设计）时才被允许。
13. **禁止不必要确认**: 不对上下文中已提供的信息寻求确认。
14. **保留现有代码**: 不删除无关代码或功能。注意保护现有结构。
15. **单块编辑**: 对单个文件的所有编辑应在一个代码块中提供，而非分步说明。
16. **禁止实现检查请求**: 不要求用户验证上下文中可见的实现。若变更影响功能，应提供自动化检查或测试，而非请求手动验证。
17. **禁止不必要更新**: 在没有实际修改需求时，不建议更新或更改文件。
18. **提供真实链接**: 始终提供指向真实文件的链接，而非上下文生成的文件。
19. **避免讨论现状**: 不讨论当前实现，除非用户询问或为解释变更影响所必需。
20. **遵循编码风格**: 遵循项目现有的编码风格以保持一致性。但对于新的、独立的交付物（如独立网页），优先考虑特定任务的设计要求，允许采用新风格。
21. **性能优先**: 在建议变更时，考虑并优先考虑代码性能（若适用）。
22. **安全第一**: 修改或建议代码时，始终考虑安全影响。
23. **测试覆盖**: 为新增或修改的代码建议或包含适当的单元测试。
24. **错误处理**: 必要时实现健壮的错误处理和日志记录。
25. **模块化设计**: 鼓励采用模块化设计原则，以提高代码可维护性和复用性。
26. **版本兼容**: 确保建议的变更与项目指定的语言或框架版本兼容。若出现版本冲突，建议替代方案或提供向后兼容的解决方案。
27. **避免魔法数字**: 使用命名常量替换硬编码值，以提高代码清晰度和可维护性。
28. **考虑边缘情况**: 实现逻辑时，始终考虑并处理潜在的边缘情况。
29. **使用断言**: 尽可能包含断言，以验证假设并及早发现潜在错误。
30. **对话语音**: 所有交流使用简体中文。
31. **标准化提示词**: 对于关键的自动化任务（如元数据更新），**必须**使用项目定义的标准化提示词模板（例如 `P.1`-`P.5`，如果已定义）。
32. **内置验证与报告**: 标准化提示词和相关工作流**必须**包含内置的验证步骤（例如，检查文件存在性、JSON 格式有效性等）。AI 助手在执行后**必须**报告操作结果，并明确指出验证步骤是否成功。

## B. 凿壁项目 - 网页开发核心原则

1.  **项目模式**: 本项目采用 **LLM 生成完整、独立 HTML 页面** 的模式。每个 `.html` 文件是一个独立的单元，代表一篇内容。
2.  **核心目标**: **最大化每个页面的创意性、独特性和视觉精美度**。允许牺牲网站范围的一致性和自动化维护的便利性，以追求卓越的单页体验。
3.  **内容来源**: 每个页面的内容和设计主要由大语言模型 (LLM) 在项目维护者的指导下生成。
4.  **聚合方式**: 所有生成的 `.html` 页面通过一个**动态索引页 (`html/index.html`)** 进行链接和组织。该索引页通过客户端 JavaScript 读取一个**通过开发流程维护**的 `html/metadata.json` 文件来动态渲染内容卡片和知识图谱。
5.  **无全局框架 (内容页)**: 单个内容页面 (`html/pages/**/*.html`) 不使用 SSG 或传统模板引擎，不存在全局共享的布局、组件或样式表（除非单个页面自行引入）。`index.html` 本身使用客户端技术（如 React/TS）构建。

## C. 网页设计与开发规范

### C.1 **角色设定：**

你是一位兼具顶尖设计审美和高超动效实现能力的**创意前端开发者与交互设计师**。你对现代 Web 设计趋势、用户体验最佳实践和信息可视化有深刻理解，尤其擅长创造既美观实用、信息清晰，又能在关键时刻通过精妙动态效果带来"Aha-moment"的网页作品。你的代码严谨，注释清晰，注重性能与跨设备兼容性。

### C.2 **核心任务：**

请根据最后提供的`内容`，设计并开发一个**视觉惊艳、信息清晰、交互丰富、高度可读的"中文"现代化单页网页**。你需要充分发挥专业判断，融合最佳的设计原则和前沿的动效技术，打造一个既有深度信息价值，又有极致感官体验的作品。

### C.3 **内容要求：**

1.  **语言:** 所有面向用户的页面内容**必须为简体中文**。
2.  **核心信息:** 忠实呈现 `内容` 的全部信息，并针对其中的核心信息通过**视觉化、结构化**的方式进行重塑，使其更易于理解和消化。
3.  **信息增强 (可选但推荐):** 主动分析 `内容`，如认为有必要，可搜索并补充少量关键背景信息、概念解释或相关图表，以增强用户对主题的全面理解。
4.  **数据与概念可视化:**
    * 深入分析 `内容` 中的关键数据、概念及其关系。
    * 设计**至少一个**美观且富有洞察力的数据可视化图表或信息图（如使用 **Charts.js** 实现条形图、折线图、饼图等）来量化展示关键数据。
    * 设计**至少一个**概念关系图或流程图（如使用 **Mermaid.js** 实现思维导图、流程图、时序图等）来直观展示核心概念、结构或逻辑关系。
    * 可视化设计需与整体页面风格协调统一，清晰传达信息。
5.  **延伸阅读:**
    * 基于 `内容` 的主题，研究并筛选出 **3-5 个**最相关、最有价值的**进一步阅读资源**（优先选择权威论文、经典书籍或深度报告）。
    * 在页面中创建一个"进一步阅读"或"推荐资源"版块，列出这些资源的标题、简要说明（为何推荐），并尽可能提供**可直接访问的有效链接** (URL)。
6.  **作者与版权信息:**
    * 在页面底部添加一个清晰的区域，包含以下信息：
        * 作者姓名: [季晓康]
        * 微信公众号：凿壁
        * 版权信息：国家健康医疗大数据研究院

### C.4 **设计目标与指导 (请灵活运用，追求卓越):**

1.  **整体风格与调性:**
    * 追求**精致、现代、专业、具有高级感**的视觉风格。可参考高端杂志、专业出版物或领域内顶尖的在线报告设计。
    * 营造能引起用户**情感共鸣**（根据内容主题决定，如专业、启发、严谨等）的氛围。
2.  **视觉吸引力 (Aha-moment):**
    * 创造一个在视觉上令人印象深刻的"第一眼"体验，能迅速抓住用户注意力并激发探索欲。
    * **Hero 模块 (强烈建议):** 设计一个引人注目的页面首屏 (Hero Section)，包含精心设计的大标题、引人入胜的副标题或摘要，并搭配高质量的背景图像、插画或抽象视觉元素。
3.  **可读性与排版:**
    * **字体选择:** 精心选择适合中文阅读的字体组合（如 Noto Serif SC / Noto Sans SC，或其他高质量中文字体搭配合适的西文字体），确保正文易读，标题具有表现力。
    * **视觉层次:** 利用字号、字重、颜色、行高、字间距等排版元素，构建清晰、舒适的视觉层次结构，引导用户阅读流。
    * **排版细节 (可选):** 可考虑运用首字下沉、引用样式、列表美化、悬挂标点（若适用）等细节提升文本的精致感。
    * **图标点缀:** 合理使用 **Font Awesome** 图标库中的图标，为列表、特性、小标题等元素增加视觉趣味和识别度。
4.  **配色方案:**
    * 设计**两套**（一套浅色模式，一套深色模式）和谐、专业且具有视觉冲击力的配色方案。
    * 确保色彩搭配符合内容调性，并提供足够的**对比度**以保证可访问性 (WCAG AA 标准)。
    * 可探索使用渐变、细微阴影或纹理等效果增加视觉深度和质感，但避免过度装饰。
    * **模式切换:** 实现完整的浅色/深色模式切换功能。默认应能跟随用户系统设置，同时提供清晰的手动切换按钮/开关。
5.  **布局与结构:**
    * 采用**基于网格**的布局系统（如 Tailwind CSS 的 Grid 或 Flexbox），确保页面结构规整、对齐。
    * **善用负空间 (留白):** 通过充足的留白创造视觉呼吸感，使内容焦点突出，避免拥挤。
    * **内容组织:** 使用卡片、分割线、背景色块、视觉分隔符等元素，将不同信息模块清晰地组织和分隔开。
6.  **动态交互与动画增强 (策略性应用):**
    * **目标:** 利用动画提升用户体验、增强信息表达和页面生动性，而非单纯炫技。动画应服务于内容和设计。
    * **工具:** 推荐使用 **GSAP + ScrollTrigger** 来实现流畅、可控的动画效果。
    * **应用场景 (按需选择):**
        * **入场动画:** 为页面元素（文本、图片、卡片）添加入场动画（如渐显、滑动进入），使用 `gsap.from()` 实现，效果应轻快、一致。
        * **滚动叙事 (电影感 SVG 动画 - 仅在极合适处使用):** 若 `内容` 中包含适合分步展示的流程、演变或故事性内容，可考虑设计**一处**核心的、由滚动驱动的"章节式"动画。此部分可使用**内联 SVG**，并运用 `stroke-dashoffset` (线条绘制)、`mask`/`clip-path` (遮罩/揭示)、`morphSVG` (形状渐变)、视差滚动等高级技巧，创造沉浸式体验。**此项要求高，仅在确信能显著提升内容表达时使用，并需确保性能。**
        * **数据可视化交互:** 为 Charts.js 或 Mermaid.js 图表添加简单的交互动画（如悬停高亮、数据点动画）。
        * **微交互:** 为按钮、链接、切换开关等可交互元素添加精细的悬停 (Hover) 和点击 (Active) 效果，提供即时反馈。
    * **性能与响应式:** 所有动画必须流畅，避免性能瓶颈。复杂动画（尤其是 SVG 动画）应做性能优化（如减少重绘、使用 `will-change`），并在移动端进行简化或禁用。使用 `ScrollTrigger.matchMedia()` 实现动画的响应式调整。

### C.5 **技术规范:**

1.  **核心技术:** HTML5, Tailwind CSS (v2.x 或 v3.x), JavaScript (ES6+)。
2.  **必备库:**
    * Tailwind CSS: `https://cdn.tailwindcss.com` (或指定版本 CDN)
    * Font Awesome: `https://cdn.staticfile.org/font-awesome/6.4.0/css/all.min.css`
    * GSAP & ScrollTrigger: (需要从 GreenSock 官网获取 CDN 链接，例如:)
        * `https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js`
        * `https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/ScrollTrigger.min.js`
    * Mermaid.js: `https://cdn.jsdelivr.net/npm/mermaid@latest/dist/mermaid.min.js` (若使用)
    * Charts.js: `https://cdn.jsdelivr.net/npm/chart.js` (若使用)
3.  **字体加载:**
    * 中文字体: 建议使用 `https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;700&family=Noto+Sans+SC:wght@400;500;700&display=swap` 或其他稳定 CDN。
    * CSS `font-family` 示例: `font-family: "Noto Sans SC", sans-serif;` (正文), `font-family: "Noto Serif SC", serif;` (标题)
4.  **代码质量:**
    * 使用语义化 HTML 标签。
    * CSS 类名遵循 Tailwind 规范。
    * JavaScript 代码结构清晰，模块化（可用 IIFE 或简单模块模式），包含必要的注释解释复杂逻辑或动画设置。
    * 确保代码符合 W3C 标准，在主流浏览器（Chrome, Firefox, Safari, Edge）上表现一致。
5.  **响应式设计:** 必须在各种设备尺寸（手机、平板、桌面）上都能完美展示和正常工作，布局不混乱，内容不溢出。
6.  **页面结构与元数据 (重要):**
    * **有效 HTML5**: 必须是完整的、有效的 HTML5 文档结构 (`<!DOCTYPE html>`, `<html>`, `<head>`, `<body>`)。
    * **页面标题 (`<title>`):** `<head>` 中**必须**包含一个准确、描述性的 `<title>` 标签。
    * **元数据 (`<meta>`):** `<head>` 中**必须**包含以下 `<meta>` 标签，且 `content` 格式需严格遵守：
        * `<meta name="publish-date" content="YYYY-MM-DD">` (**必填**, 发布日期，必须是当前服务器时间)
        * `<meta name="category" content="分类名">` (**必填**, `分类名` **必须**是 "信息化升级", "科研辅助", "AI技术与生态", "知识报告" 其中之一)
        * `<meta name="description" content="页面摘要...">` (**必填**, 用于索引页动态生成卡片摘要)
        * `<meta name="keywords" content="关键词1,关键词2,...">` (**必填**, 逗号分隔，用于知识图谱生成，至少提供 3-5 个核心关键词)
7.  **页面必需内容:**
    * **可见信息标签:** 在 `<body>` 内的**某个位置** (具体位置和样式可由 LLM 创意决定) **必须**包含可见的发布日期和分类名称 (应与 `<meta>` 标签一致)。
    * **返回首页链接:** 页面**必须**包含一个清晰可见的、指向项目根目录 `index.html` 的链接 (路径需根据文件存放位置调整，例如，如果文件在 `pages/info-upgrade/` 下，链接应为 `../../index.html`)。
    * **作者与版权:** **必须**在页面底部包含作者信息和版权信息（具体内容见 C.1）。
8.  **独立性与无全局依赖:** 生成的页面**不应**假设存在项目范围的全局 CSS 文件或 JavaScript 脚本 (如全局主题切换脚本)。所有样式和脚本要么内联，要么是页面自身链接的外部资源 (CDN 或页面特定文件)。页面自身的深色/浅色模式切换逻辑需在页面内实现。

### C.6 **输出要求:**

* 提供一个**完整、独立、可直接在浏览器中运行的单一 HTML 文件** (`.html`)。
* 所有 CSS (Tailwind 生成的样式 或 内联 `<style>`) 和 JavaScript 代码都应包含在该 HTML 文件中（内联或嵌入）。
* 确保所有外部资源（CDN 链接）有效。
* SVG 图形应直接内联在 HTML 中。
* 最终代码需经过测试，无明显错误或控制台警告。
*   不要一次填充所有HTML代码，在充分思考规划后，分段分步骤创建html文件，并更新内容。

---

**请开始创作！期待你结合设计才华与技术实力，打造出令人惊艳的作品。**


## E. 文件管理与维护 (开发时辅助流程)

1.  **文件存储:** 生成的 `.html` 文件应根据其 `<meta name="category">` 内容存放在 `pages/` 目录下对应的子文件夹中：
    *   `pages/info-upgrade/`
    *   `pages/research/`
    *   `pages/ai-tech/`
    *   `pages/knowledge/`
2.  **文件命名:** HTML 文件名应使用小写英文，用连字符 `-` 分隔，清晰反映内容主题 (例如 `llm-creative-page-design.html`)。
3.  **索引 (`metadata.json`) 维护 (开发时辅助流程):**
    *   **`index.html` 不再手动维护。** 其内容由客户端 JavaScript 读取 `html/metadata.json` 文件动态生成。
    *   `html/metadata.json` 是索引的唯一数据源，包含所有已发布页面的元数据数组 (`pages`) 和一个顶层最后更新时间戳 (`lastUpdated`)。
    *   **更新 `metadata.json` 必须通过维护者在 Cursor 中引导 LLM 完成，并严格遵循标准化的、包含验证步骤的提示词 (参考 `architecture.md` P.1-P.5 或类似定义)。**
    *   该自动化流程负责：
        *   从目标 HTML 文件**自动提取**所有必需的元数据 (title, description, publishDate, category, keywords, path)。
        *   **自动获取**文件的最后修改时间 (`lastModifiedDate`)。
        *   读取当前的 `metadata.json`。
        *   将新页面的元数据（使用相对路径 `path` 作为唯一 `id`）添加或更新到内存中的 `pages` 数组。
        *   更新顶层的 `lastUpdated` 时间戳。
        *   **执行原子写入**: 将更新后的数据写入临时文件，验证 JSON 格式有效性，然后替换原文件。
        *   **报告结果**: LLM 必须向维护者报告整个操作的结果，并明确指出内置的验证步骤是否成功。维护者基于此报告确认操作完成。
4.  **内容页面验证 (前置步骤):** 在触发 `metadata.json` 更新流程**之前**，维护者应（可借助 LLM）**验证**新生成的 HTML 文件是否满足 D 部分的核心要求 (元数据标签存在性、返回链接、作者信息等)。
5.  **版本控制:** 所有新创建或修改的 `.html` 文件和更新后的 `metadata.json` 都应通过 Git 提交和管理。

## F. 辅助工具与技术 (页面级)

1.  **CSS 框架 (页面级):** 单个页面**可以**选择性地通过 CDN 链接 Tailwind CSS 或其他 CSS 框架，但需注意这只影响该页面自身。
2.  **JavaScript (页面级):** 单个页面**可以**包含内联 `<script>` 或通过 CDN/本地文件链接必要的 JavaScript 库 (如 Mermaid.js)，用于实现页面特定的交互或可视化。脚本初始化需在页面内部完成。
3.  **Font Awesome:** 可通过 CDN 在单个页面中引入 Font Awesome 以使用图标。

## G. 注意事项

*   保持代码仓库整洁，遵循 Git 最佳实践。
*   所有页面必须通过 W3C 标准验证。
*   不添加任何未经授权的第三方插件或库。
*   严格遵守隐私保护原则，不收集不必要的用户数据。