---
description: 
globs: 
alwaysApply: false
---
## A. 通用协作规则
1.  **开发前置检查 (重要):** 在开始任何网页开发任务（例如，创建或修改HTML页面）之前，**必须**首先通过运行 `git status` 或 `git branch` 检查当前的 Git 分支。**必须**确保当前分支是 `develop` 分支。如果不在 `develop` 分支，应先切换到 `develop` 分支 (`git checkout develop`) 并拉取最新代码 (`git pull origin develop`) 再开始工作。
2.  **知识库优先**: 始终参考 `.cursor/rules` 文件夹来理解项目背景，除非任务明确需要外部信息（例如网页设计需要补充信息）且有文档说明例外情况。
3.  **范围限制**: 不要在 `.cursor/rules` 文件夹提供的上下文之外编写代码，除非任务明确允许例外。
4.  **知识库核心**: `.cursor/rules` 文件夹是核心知识库，包含应普遍遵循的基本规则和指南。
5.  **优先查阅**: 如有不清楚之处，在编写代码前请先查阅此文件夹或特定任务文档。
6.  **信息核实**: 在呈现信息前，务必核实其来源是上下文还是经授权的外部资源（若任务允许）。
7.  **避免臆测**: 没有明确证据时，不要做假设或推测。但对于网页设计等创意任务，允许在任务要求范围内基于设计原则进行专业判断和解读。
8.  **禁止道歉**: 不使用道歉性语句。
9.  **禁止理解反馈**: 不在注释或文档中提供关于"是否理解"的反馈。
10. **禁止空白建议**: 不建议进行空白符相关的修改。
11. **禁止非必要总结**: 不提供不必要的变更总结。仅在用户明确要求简要概述时才进行总结。
12. **禁止额外修改**: 除明确要求外，不添加额外改动。创意解读、设计决策或内容补充只有在明确属于任务要求（如网页设计）时才被允许。
13. **禁止不必要确认**: 不对上下文中已提供的信息寻求确认。
16. **禁止实现检查请求**: 不要求用户验证上下文中可见的实现。若变更影响功能，应提供自动化检查或测试，而非请求手动验证。
17. **禁止不必要更新**: 在没有实际修改需求时，不建议更新或更改文件。
18. **提供真实链接**: 始终提供指向真实文件的链接，而非上下文生成的文件。
20. **遵循编码风格**: 遵循项目现有的编码风格以保持一致性。但对于新的、独立的交付物（如独立网页），优先考虑特定任务的设计要求，允许采用新风格。
21. **性能优先**: 在建议变更时，考虑并优先考虑代码性能（若适用）。
22. **安全第一**: 修改或建议代码时，始终考虑安全影响。
23. **测试覆盖**: 为新增或修改的代码建议或包含适当的单元测试。
24. **错误处理**: 必要时实现健壮的错误处理和日志记录。
25. **模块化设计**: 鼓励采用模块化设计原则，以提高代码可维护性和复用性。
27. **避免魔法数字**: 使用命名常量替换硬编码值，以提高代码清晰度和可维护性。
28. **考虑边缘情况**: 实现逻辑时，始终考虑并处理潜在的边缘情况。
29. **使用断言**: 尽可能包含断言，以验证假设并及早发现潜在错误。
30. **对话语音**: 所有交流使用简体中文。
31. **标准化提示词**: 对于关键的自动化任务（如元数据更新），**必须**使用项目定义的标准化提示词模板（例如 `P.1`-`P.5`，如果已定义）。
32. **内置验证与报告**: 标准化提示词和相关工作流**必须**包含内置的验证步骤（例如，检查文件存在性、JSON 格式有效性等）。执行后**必须**报告操作结果，并明确指出验证步骤是否成功。
