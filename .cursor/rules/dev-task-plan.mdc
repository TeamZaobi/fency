---
description: 
globs: 
alwaysApply: false
---
**凿壁项目 - “精细化网页开发流程”制定方案 (V2.1 - 规则驱动)**

**项目目标：**给后续的网页开发制定一个详细准确的开发任务列表。**视觉惊艳、信息清晰、交互丰富、高度可读的简体中文**现代化单页 HTML 网页，**严格遵循项目规范**，并追求**卓越的单页体验**。

**核心原则：**制定出来的开发任务，必须能够实现开发**创意性、独特性、视觉精美度优先**；独立单元开发；迭代开发；内容保真与视觉重塑并重；**严格遵守技术规范 和元数据管理流程**。

---

**阶段一：准备与规划 (Preparation & Planning)**

1. **需求与内容分析：**
    - `[ ]`**深度理解源 Markdown 内容：**明确核心主题、关键信息、数据点、逻辑流程。**识别用于视觉化重塑 (结构化、可视化) 的关键内容**。
    - `[ ]`**判断页面模式：**
        - `[ ]`**输入是单个****`.md`****文件？**-> 遵循标准单页模式。
        - `[ ]`**输入是包含多个****`.md`****文件的文件夹？**-> 切换至**多文档融合页面模式**。
            - `[ ]`确认文件名符合来源命名规范。
            - `[ ]`规划内容融合与筛选逻辑（基于启发式规则）。
            - `[ ]`规划来源追溯标注方法。
            - `[ ]`规划贡献度分析与 Top 3 来源雷达图实现。
    - `[ ]`**确定核心元数据：**
        - `[ ]`页面标题 (Title): 初步拟定，格式`[页面主题] | 凿壁`。
        - `[ ]`分类 (Category):**必须**从`"ai-tech"`,`"info-upgrade"`,`"knowledge"`,`"research"`中选择一个。
        - `[ ]`描述 (Description): 撰写 100-200 字摘要草稿 (用于`index.html`卡片)。
        - `[ ]`关键词 (Keywords): 列出**至少 3-5 个**核心关键词草稿，逗号分隔 (用于知识图谱)。
    - `[ ]`**构思视觉与交互：**
        - `[ ]`设计整体风格：追求**精致、现代、专业、高级感**。
        - `[ ]`**设计 Hero Section (强烈建议)：**包含引人注目的标题、摘要和视觉元素，创造"第一眼"吸引力。
        - `[ ]`规划布局：使用 Grid/Flexbox，**善用留白**。
        - `[ ]`**规划可视化：**
            - `[ ]`确定**至少一个 Chart.js**图表（数据可视化）。(如果是 B-bis 模式，**必须包含雷达图**)
            - `[ ]`确定**至少一个 Mermaid.js**图表（概念/流程可视化），注意中文内容需使用引号。
        - `[ ]`**规划动画与交互：使用 Framer Motion，考虑**滚动触发等策略性应用，提升体验而非炫技，创造"Aha-moment"。
    - `[ ]`**文件命名与存储规划：**
        - `[ ]`确定最终 HTML 文件名 (小写英文，连字符分隔)。
        - `[ ]`确定存放路径 (`pages/[category]/[filename.html]`)。
    - `[ ]`**制定详细任务清单 (如`plan.md`)：**分解后续步骤。

**阶段二：基础构建与环境搭建 (Foundation & Setup)**

1. **HTML 结构与头部 (****`<head>`****)：**
    - `[ ]`创建标准、有效的 HTML5 文件骨架 (`<!DOCTYPE html>`,`<html lang="zh-CN">`,`<head>`,`<body>`)。
    - `[ ]`添加基础`<meta>`标签 (`charset="UTF-8"`,`name="viewport"`)。
    - `[ ]`**添加必需的****`<meta>`****标签 (严格按格式与内容)：**
        - `[ ]``<meta name="publish-date" content="YYYY-MM-DD">`(**必须使用创建/更新时的服务器当前日期**)。
        - `[ ]``<meta name="category" content="[已确定的分类代码]">`(**必须是指定值之一**)。
        - `[ ]``<meta name="description" content="...">`(填入摘要)。
        - `[ ]``<meta name="keywords" content="...">`(填入关键词，逗号分隔，至少 3-5 个)。
    - `[ ]`添加准确、描述性的页面`<title>`。
    - `[ ]`**引入必需的 CDN 资源：**Tailwind CSS, Font Awesome, Google Fonts (推荐 Noto Sans/Serif SC), Chart.js, Mermaid.js, Framer Motion, Highlight.js (含浅色/深色主题 CSS)。
2. **CSS 与主题设置：**
    - `[ ]`在`<head>`内添加`<style>`块。
    - `[ ]`**严格使用项目规则中提供的 CSS 变量**定义主题 (浅色`:root`/ 深色`.dark`)。
    - `[ ]`**链接 Highlight.js 主题 CSS：**默认启用浅色，禁用深色。
    - `[ ]`**定义基础`body`样式：**使用 CSS 变量设置字体、背景色、前景色。
    - `[ ]`**添加 Tailwind CSS 配置脚本**(如果使用 CDN)。
3. **核心 JavaScript 功能：**
    - `[ ]`**实现主题切换逻辑 (独立实现)：**
        - `[ ]`添加切换按钮 HTML。
        - `[ ]`编写 JS 切换`<html>`上的`dark`类。
        - `[ ]`编写 JS 更新按钮状态/图标。
        - `[ ]`**实现****`updateVisualizationThemes`****函数 (严格按逻辑)：**
            - `[ ]`a. 检查`document.documentElement.classList.contains('dark')`确定新主题。
            - `[ ]`b. 使用新主题调用`mermaid.initialize()`(设置`theme`属性)。
            - `[ ]`(处理 Highlight.js 主题切换) 启用/禁用对应的`<link>`标签。
            - `[ ]`c. 遍历 Chart.js 实例数组 (`window.chartInstances`)。
            - `[ ]`d. 对**每个**实例：
                - `[ ]`i. 使用`getComputedStyle`获取**所有**需要的 CSS 变量颜色值。
                - `[ ]`ii.**显式更新**图表`options`中的相关颜色属性。
                - `[ ]`iii. 调用`chartInstance.update()`应用更改。
        - `[ ]`在`DOMContentLoaded`和主题切换按钮点击后调用`updateVisualizationThemes`。
4. **基础页面布局：**
    - `[ ]`创建主要的页面容器 (使用 Grid/Flexbox, 设置 max-width, mx-auto, padding,**利用留白**)。
    - `[ ]`**添加返回首页链接：**`<a href="../../index.html">返回首页</a>`(路径需根据实际位置调整，**必须是相对路径**)。
    - `[ ]`**添加页脚 (`<footer>`)：**包含作者姓名 "[季晓康]", 公众号 "凿壁", 版权信息 "国家健康医疗大数据研究院"。
    - `[ ]`**在页脚或其他可见位置添加：**
        - `[ ]`发布日期 (格式如 "发布于 YYYY年MM月DD日")，**日期必须与****`<meta name="publish-date">`****完全一致**。
        - `[ ]`分类名称 (中文，如 "AI 技术")，与`<meta name="category">`对应。

**阶段三：内容填充与精细化设计 (Content Population & Styling)**

1. **迁移与结构化内容：**
    - `[ ]`**逐段**将 Markdown 内容转换为语义化的 HTML，确保**内容为简体中文**。
    - `[ ]`**进行视觉化、结构化重塑**：
        - `[ ]`使用**细粒度卡片**组织逻辑块。
        - `[ ]`利用标题层级、列表、引用样式等提升结构清晰度。
    - `[ ]`**(B-bis 模式)：**
        - `[ ]`实现内容融合与筛选逻辑。
        - `[ ]`在整合内容中添加清晰的**来源追溯标注**。
        - `[ ]`构建"来源分析"部分：贡献度统计、Top 3 列表。
2. **Tailwind CSS 精细化样式：**
    - `[ ]`应用 Tailwind 类，**严格使用主题 CSS 变量**。
    - `[ ]`合理使用**Font Awesome 图标**点缀。
    - `[ ]`追求**精致、现代、专业**的视觉风格，注重视觉层次和可读性。
    - `[ ]`（可选）运用首字下沉等排版细节。
3. **优化特定元素样式：**
    - `[ ]`**代码块 (****`<pre><code>`****) (代码质量)：**
        - `[ ]`使用`div.code-block-container`结构，包含标题栏和功能性复制代码按钮。
        - `[ ]`应用`highlight.js`语法高亮 (`language-xyz`类)。
        - `[ ]`确保主题切换时高亮样式同步更新。
    - `[ ]`**表格 (****`<table>`****)：**
        - `[ ]`美化`<thead>`,`<td>`,`<th>`，设置交替行背景和悬停效果。
        - `[ ]`确保响应式 (`overflow-x-auto`)。

**阶段四：可视化与交互增强 (Visualization & Interactivity)**

1. **实现数据可视化 (Chart.js)：**
    - `[ ]`添加`<canvas>`元素。
    - `[ ]`编写 JS 创建**至少一个**Chart.js 实例 (B-bis 模式**必须**包含雷达图)。
    - `[ ]`**严格要求：颜色配置**必须通过`getComputedStyle`从 CSS 变量动态获取。
    - `[ ]`将实例存入`window.chartInstances`。
    - `[ ]`在`updateVisualizationThemes`中更新颜色。
2. **实现概念/流程可视化 (Mermaid.js)：**
    - `[ ]`添加`<pre class="mermaid">`并编写**至少一个**图表代码。
    - `[ ]`**注意语法：**中文内容使用引号，优先使用分离定义语法。
    - `[ ]`**确保逻辑准确反映原文**。
    - `[ ]`Mermaid 主题切换由`updateVisualizationThemes`处理。
3. **实现动画效果 (Framer Motion)：**
    - `[ ]`编写`setupAnimations`函数。
    - `[ ]`**正确引用库 API**(检查`framerMotion`全局对象)。
    - `[ ]`**实现滚动触发动画**(使用`IntersectionObserver`)，提升用户体验。
    - `[ ]`**策略性应用**动画，增强信息表达或创造"Aha-moment"。

**阶段五：补充内容与细节完善 (Refinement & Enhancement)**

1. **添加"延伸阅读"版块：**
    - `[ ]`调研筛选**3-5 个**权威、相关的外部资源。
    - `[ ]`创建`<section>`，列出标题、推荐理由、有效链接。
2. **添加"参考文献"版块 (若适用)：**
    - `[ ]`创建可展开/折叠`<section>`。
    - `[ ]`解析引用源，生成带编号、来源、返回链接的列表。
    - `[ ]`修改正文引用标记`[N]`为链接，添加对应 ID。
    - `[ ]`添加 JS 实现交互 (展开/折叠/平滑滚动)。
3. **信息增强 (可选)：**
    - `[ ]`根据需要，搜索并补充少量关键背景信息或概念解释。
4. **内容保真度最终审查：**
    - `[ ]`**再次对照源 Markdown**，确保所有信息已忠实呈现，未在重塑中失真。

**阶段六：测试与验证 (Testing & Validation)**

1. **功能测试：**
    - `[ ]`测试主题切换及所有视觉元素（图表、代码）的同步更新。
    - `[ ]`测试可视化渲染。
    - `[ ]`测试动画效果。
    - `[ ]`测试所有交互功能 (复制代码、参考文献等)。
    - `[ ]`测试所有链接有效性 (包括**相对路径**的首页链接)。
2. **兼容性与响应式测试：**
    - `[ ]`测试主流浏览器。
    - `[ ]`测试不同屏幕尺寸。
3. **内容与规范检查：**
    - `[ ]`检查内容准确性、**简体中文**。
    - `[ ]`**严格核对****`<meta>`****标签**：`publish-date`(非未来),`category`(指定值),`description`,`keywords`(数量)。
    - `[ ]`**严格核对可见信息：**发布日期/分类名称及其与`meta`的一致性，作者/版权信息。
    - `[ ]`检查控制台，**确保无错误**。
4. **代码验证：**
    - `[ ]`使用 W3C 验证器验证 HTML。

**阶段七：收尾与元数据更新 (Finalization & Metadata Update)**
1. **代码清理：**
    - `[ ]`移除临时代码/注释。确保输出是**完整、独立的 HTML 文件**。
2. **路径最终确认：**
    - `[ ]`最终检查**所有内部链接（尤其是返回首页）使用相对路径**。
3. **内容页面规范符合性最终验证:**
    - `[ ]`在更新 metadata.json**之前**，最后确认页面满足核心要求。
4. **执行标准化的****`metadata.json`****更新流程 (严格按流程)：**
    - `[ ]`触发自动化流程。
    - `[ ]`流程**自动提取**元数据。
    - `[ ]`流程**自动获取**`lastModifiedDate`。
    - `[ ]`**流程必须使用当前的服务器日期作为****`publish-date`**。
    - `[ ]`流程更新`pages`数组 (添加/更新条目，使用`path`作为`id`)，**按****`publish-date`****降序排序**。
    - `[ ]`流程更新顶层`lastUpdated`时间戳。
    - `[ ]`流程执行**原子写入**(临时文件 -> 验证 -> 替换)。
    - `[ ]`流程执行**JSON 验证**(`jq . metadata.json`)。
    - `[ ]`流程执行**同步**(`cp metadata.json dist/metadata.json`)。
    - `[ ]`**必须检查流程报告结果**，确认所有步骤（包括验证）成功。
5. **版本控制：**
    - `[ ]`将新/修改的`.html`文件和更新后的`metadata.json`(及`dist/metadata.json`) 提交到 Git。
